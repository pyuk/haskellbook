
==================== FINAL INTERFACE ====================
2016-09-21 01:20:35.855368 UTC

interface main@main:Main 8001
  interface hash: b0cc3d0bc35a2ce6645b9f00fe5d335d
  ABI hash: 3b318c2a2565aa67590a7bacc395fc4f
  export-list hash: 25f7a3533a822f8635390e674d96c866
  orphan hash: 906a4caca5aa6eb76abd649f9861ed93
  flag hash: b272720ae407eceffb81280430f6290b
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.allWords
  Main.alreadyGuessed
  Main.charInWord
  Main.fillInCharacter
  Main.freshPuzzle
  Main.gameOver
  Main.gameWin
  Main.gameWords
  Main.gimmePerson
  Main.handleGuess
  Main.main
  Main.maxWordLength
  Main.minWordLength
  Main.mkPerson
  Main.paliChecker
  Main.palindrome
  Main.randomWord
  Main.randomWord'
  Main.renderPuzzleChar
  Main.runGame
  Main.wrongGuess
  Main.Age
  Main.Name
  Main.Person{Main.Person}
  Main.PersonInvalid{Main.AgeTooLow Main.NameEmpty Main.PersonInvalidUnknown}
  Main.Puzzle{Main.Puzzle}
  Main.WordList{Main.WordList}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe*
                      time-1.6.0.1@time-1.6.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Data.Char eb33dc25ecb52d018a0ca26590e2b50b
import  -/  base-4.9.0.0:Data.Either bd9f099b82d4ed2d98c56d7144ac6957
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.Maybe 5f2ba364cbe65c060bc5436bc0b9d049
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:GHC.Unicode 2343b0871604cc5116abba8f24d75b42
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.Exit 4df7be78e54bbe200276120bd44e7e2a
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  base-4.9.0.0:Text.Read 9c1be14f7e5eac8b18bcb566c5763677
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 62c0e736506aac47ef40569f5b82e19d
import  -/  random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe:System.Random 12e582ce6a18ca02c107789bb28c509c
c1d397394a16e069dd2ad30dbf930e5e
  $fEqPersonInvalid :: GHC.Classes.Eq Main.PersonInvalid
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.PersonInvalid
                  Main.$fEqPersonInvalid_$c==
                  Main.$fEqPersonInvalid_$c/= -}
c1d397394a16e069dd2ad30dbf930e5e
  $fEqPersonInvalid_$c/= ::
    Main.PersonInvalid -> Main.PersonInvalid -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Main.PersonInvalid)
                   (b :: Main.PersonInvalid) ->
                 case a of wild {
                   Main.NameEmpty
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Main.NameEmpty -> GHC.Types.False }
                   Main.AgeTooLow
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Main.AgeTooLow -> GHC.Types.False }
                   Main.PersonInvalidUnknown a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Main.PersonInvalidUnknown b1
                        -> case GHC.Base.eqString a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
c1d397394a16e069dd2ad30dbf930e5e
  $fEqPersonInvalid_$c== ::
    Main.PersonInvalid -> Main.PersonInvalid -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Main.PersonInvalid)
                   (ds1 :: Main.PersonInvalid) ->
                 case ds of wild {
                   Main.NameEmpty
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Main.NameEmpty -> GHC.Types.True }
                   Main.AgeTooLow
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Main.AgeTooLow -> GHC.Types.True }
                   Main.PersonInvalidUnknown a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Main.PersonInvalidUnknown b1 -> GHC.Base.eqString a1 b1 } }) -}
577ede97fdb78662881bf2855987b161
  $fEqPuzzle :: GHC.Classes.Eq Main.Puzzle
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Puzzle Main.$fEqPuzzle_$c== Main.$fEqPuzzle_$c/= -}
577ede97fdb78662881bf2855987b161
  $fEqPuzzle_$c/= :: Main.Puzzle -> Main.Puzzle -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.Puzzle) (b :: Main.Puzzle) ->
                 case Main.$fEqPuzzle_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
577ede97fdb78662881bf2855987b161
  $fEqPuzzle_$c== :: Main.Puzzle -> Main.Puzzle -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Puzzle) (w1 :: Main.Puzzle) ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 case w1 of ww4 { Main.Puzzle ww5 ww6 ww7 ->
                 Main.$w$c== ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
7a60626fcf38dd4b5a70abd7faf1c04b
  $fEqPuzzle_$s$fEqMaybe ::
    GHC.Classes.Eq (GHC.Base.Maybe GHC.Types.Char)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GHC.Types.Char)
                  Main.$fEqPuzzle_$s$fEqMaybe_$c==
                  (GHC.Base.$fEqMaybe_$c/= @ GHC.Types.Char GHC.Classes.$fEqChar) -}
cabf3008db24354b54137ff64b739eef
  $fEqPuzzle_$s$fEqMaybe_$c== ::
    GHC.Base.Maybe GHC.Types.Char
    -> GHC.Base.Maybe GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Base.Maybe GHC.Types.Char)
                   (ds1 :: GHC.Base.Maybe GHC.Types.Char) ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1 -> GHC.Classes.eqChar a1 b1 } }) -}
0a704ac3e3ff17d87838c45615edd3ce
  $fEqWordList :: GHC.Classes.Eq Main.WordList
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.WordList Main.$fEqWordList_$c== Main.$fEqWordList_$c/= -}
0a704ac3e3ff17d87838c45615edd3ce
  $fEqWordList_$c/= ::
    Main.WordList -> Main.WordList -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$c/=2
                  `cast`
                (Sym (Main.N:WordList[0])
                 ->_R Sym (Main.N:WordList[0])
                 ->_R <GHC.Types.Bool>_R) -}
0a704ac3e3ff17d87838c45615edd3ce
  $fEqWordList_$c== ::
    Main.WordList -> Main.WordList -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$c==2
                  `cast`
                (Sym (Main.N:WordList[0])
                 ->_R Sym (Main.N:WordList[0])
                 ->_R <GHC.Types.Bool>_R) -}
ac7807dd98638ef3b0ccf1b6e0685093
  $fShowPerson :: GHC.Show.Show Main.Person
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Person
                  Main.$fShowPerson_$cshowsPrec
                  Main.$fShowPerson_$cshow
                  Main.$fShowPerson_$cshowList -}
ac7807dd98638ef3b0ccf1b6e0685093
  $fShowPerson1 :: Main.Person -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Main.Person) (w1 :: GHC.Base.String) ->
                 case w of ww { Main.Person ww1 ww2 ->
                 Main.$w$cshowsPrec 0# ww1 ww2 w1 }) -}
f6626bfe15ef2cceebefe37097f131b5
  $fShowPerson2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Person "#) -}
c1d397394a16e069dd2ad30dbf930e5e
  $fShowPersonInvalid :: GHC.Show.Show Main.PersonInvalid
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.PersonInvalid
                  Main.$fShowPersonInvalid_$cshowsPrec
                  Main.$fShowPersonInvalid_$cshow
                  Main.$fShowPersonInvalid_$cshowList -}
c1d397394a16e069dd2ad30dbf930e5e
  $fShowPersonInvalid1 :: Main.PersonInvalid -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Main.$fShowPersonInvalid_$cshowsPrec
                   Main.$fShowPersonInvalid2) -}
01fc1977c17f9f7223d83f23bd6e718f
  $fShowPersonInvalid2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
2b806158a55da33a323d310bdd750bc1
  $fShowPersonInvalid3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "PersonInvalidUnknown "#) -}
0c17652e1eaaabd7168591af1ce2c2e8
  $fShowPersonInvalid4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AgeTooLow"#) -}
11e8defb3b2f3170599cf2eed3f107b6
  $fShowPersonInvalid5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NameEmpty"#) -}
cf68895b40b0d18ff35158486e6d907a
  $fShowPersonInvalid6 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c1d397394a16e069dd2ad30dbf930e5e
  $fShowPersonInvalid_$cshow :: Main.PersonInvalid -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Main.PersonInvalid) ->
                 case x of wild {
                   Main.NameEmpty -> Main.$fShowPersonInvalid5
                   Main.AgeTooLow -> Main.$fShowPersonInvalid4
                   Main.PersonInvalidUnknown b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Main.$fShowPersonInvalid3
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows8
                           (GHC.Show.showLitString b1 Main.$fShowPersonInvalid6)) }) -}
c1d397394a16e069dd2ad30dbf930e5e
  $fShowPersonInvalid_$cshowList ::
    [Main.PersonInvalid] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.PersonInvalid
                   Main.$fShowPersonInvalid1) -}
c1d397394a16e069dd2ad30dbf930e5e
  $fShowPersonInvalid_$cshowsPrec ::
    GHC.Types.Int -> Main.PersonInvalid -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: Main.PersonInvalid)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Main.NameEmpty
                   -> GHC.Base.++ @ GHC.Types.Char Main.$fShowPersonInvalid5 eta
                   Main.AgeTooLow
                   -> GHC.Base.++ @ GHC.Types.Char Main.$fShowPersonInvalid4 eta
                   Main.PersonInvalidUnknown b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Main.$fShowPersonInvalid3
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows8
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowPersonInvalid3
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows8
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows8
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows6
                                            eta))))) } } }) -}
ac7807dd98638ef3b0ccf1b6e0685093
  $fShowPerson_$cshow :: Main.Person -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Person) ->
                 Main.$fShowPerson_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ac7807dd98638ef3b0ccf1b6e0685093
  $fShowPerson_$cshowList :: [Main.Person] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.Person
                   Main.$fShowPerson1) -}
ac7807dd98638ef3b0ccf1b6e0685093
  $fShowPerson_$cshowsPrec ::
    GHC.Types.Int -> Main.Person -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Person)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Person ww3 ww4 ->
                 Main.$w$cshowsPrec ww1 ww3 ww4 w2 } }) -}
577ede97fdb78662881bf2855987b161
  $fShowPuzzle :: GHC.Show.Show Main.Puzzle
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Puzzle
                  Main.$fShowPuzzle_$cshowsPrec
                  Main.$fShowPuzzle_$cshow
                  Main.$fShowPuzzle_$cshowList -}
577ede97fdb78662881bf2855987b161
  $fShowPuzzle1 :: Main.Puzzle -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (x :: Main.Puzzle) (s :: GHC.Base.String)[OneShot] ->
                 case x of ww { Main.Puzzle ww1 ww2 ww3 ->
                 GHC.Base.++ @ GHC.Types.Char (Main.$w$cshow ww2 ww3) s }) -}
af8b2509c8f6218cd97ea6d88fc91f93
  $fShowPuzzle2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' '#) -}
5ddbb80218b55189833ce5a44fbe1a1e
  $fShowPuzzle3 :: (GHC.Types.Char -> b -> b) -> b -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U>,
     Unfolding: (\ @ b
                   (c :: GHC.Types.Char -> b -> b)[OneShot]
                   (n :: b)[OneShot] ->
                 GHC.CString.unpackFoldrCString# @ b " Guessed so far: "# c n) -}
577ede97fdb78662881bf2855987b161
  $fShowPuzzle_$cshow :: Main.Puzzle -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Puzzle) ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 Main.$w$cshow ww2 ww3 }) -}
577ede97fdb78662881bf2855987b161
  $fShowPuzzle_$cshowList :: [Main.Puzzle] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [Main.Puzzle]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.Puzzle Main.$fShowPuzzle1 ls s) -}
577ede97fdb78662881bf2855987b161
  $fShowPuzzle_$cshowsPrec ::
    GHC.Types.Int -> Main.Puzzle -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><S(LSL),1*U(A,1*U,U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: Main.Puzzle)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Main.$fShowPuzzle_$cshow x))
                   s) -}
0a704ac3e3ff17d87838c45615edd3ce
  $fShowWordList :: GHC.Show.Show Main.WordList
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.WordList
                  Main.$fShowWordList_$cshowsPrec
                  Main.$fShowWordList_$cshow
                  Main.$fShowWordList_$cshowList -}
0a704ac3e3ff17d87838c45615edd3ce
  $fShowWordList1 :: Main.WordList -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Main.WordList) (w1 :: GHC.Base.String) ->
                 Main.$w$cshowsPrec1 0# w w1) -}
5ba9668c078a0f1059484ea0cd209ee0
  $fShowWordList2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "WordList "#) -}
0a704ac3e3ff17d87838c45615edd3ce
  $fShowWordList_$cshow :: Main.WordList -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.WordList) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowWordList2)
                   (GHC.Show.showList__
                      @ [GHC.Types.Char]
                      GHC.Show.shows_$cshowList
                      x `cast` (Main.N:WordList[0])
                      (GHC.Types.[] @ GHC.Types.Char))) -}
0a704ac3e3ff17d87838c45615edd3ce
  $fShowWordList_$cshowList :: [Main.WordList] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.WordList
                   Main.$fShowWordList1) -}
0a704ac3e3ff17d87838c45615edd3ce
  $fShowWordList_$cshowsPrec ::
    GHC.Types.Int -> Main.WordList -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.WordList)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec1 ww1 w1 w2 }) -}
9633c98b1e82248c9597799a5299a142
  $tc'AgeTooLow :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13192180704262937956##
                   12397390519771884151##
                   Main.$trModule
                   Main.$tc'AgeTooLow1) -}
21df369d764e724ca0fc42acb6f95824
  $tc'AgeTooLow1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AgeTooLow"#) -}
f832de4d78491c0a87eab03864342dd2
  $tc'NameEmpty :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7691117948588290136##
                   6086561234260839487##
                   Main.$trModule
                   Main.$tc'NameEmpty1) -}
b3250ae965a2e98e6a44b312a039f2c2
  $tc'NameEmpty1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NameEmpty"#) -}
3638b10ba8b1c75d480457f85425a2cc
  $tc'Person :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10756901104406865812##
                   156267496560154259##
                   Main.$trModule
                   Main.$tc'Person1) -}
ea04c3d59a73c689b333af1bf1e9aff4
  $tc'Person1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Person"#) -}
692de7bbc39174d9e95daae5459a5a7d
  $tc'PersonInvalidUnknown :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15613157472665252035##
                   17927689316500775290##
                   Main.$trModule
                   Main.$tc'PersonInvalidUnknown1) -}
944d6be235c86d05faf062bb87fd7c8b
  $tc'PersonInvalidUnknown1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PersonInvalidUnknown"#) -}
563a88b7bd78be50ca7e48e1c689e5f3
  $tc'Puzzle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3355915762698541313##
                   14556823112734747473##
                   Main.$trModule
                   Main.$tc'Puzzle1) -}
de85fd3ec53835ea43a4aa38197e049a
  $tc'Puzzle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Puzzle"#) -}
7b9c2e2d9f6792410936b852932d91b3
  $tc'WordList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7754548729261262938##
                   7016052871235085117##
                   Main.$trModule
                   Main.$tc'WordList1) -}
2668d8f7643a79f2935fd5453245432e
  $tc'WordList1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'WordList"#) -}
c1978ff0e93e1a3d970a783e4f51d7a6
  $tcPerson :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8788575374629931781##
                   4333646247338374506##
                   Main.$trModule
                   Main.$tcPerson1) -}
d4f6a7c73b4c79ad27db3a681cdd97ed
  $tcPerson1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Person"#) -}
3b11509648c2b4bd9150c5751fe09203
  $tcPersonInvalid :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10507014622586897418##
                   10428975723286893692##
                   Main.$trModule
                   Main.$tcPersonInvalid1) -}
02bc1489772881777f0d577e55de82d2
  $tcPersonInvalid1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "PersonInvalid"#) -}
dd3dad1a8e7d6ea0185c41d0f418859f
  $tcPuzzle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4184397067194358297##
                   5931153594655639713##
                   Main.$trModule
                   Main.$tcPuzzle1) -}
9dd25e46b76df9a6ad7069441e80bd3f
  $tcPuzzle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Puzzle"#) -}
94187d3d3e44c6ae4ad820d407a962d2
  $tcWordList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1980310452829788091##
                   8891825771107671869##
                   Main.$trModule
                   Main.$tcWordList1) -}
b3d4d51da14b07747b31a7412e863f87
  $tcWordList1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "WordList"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
28169150e400b399dc13c9f5c1555a28
  $w$c== ::
    GHC.Base.String
    -> [GHC.Base.Maybe GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Base.String
    -> [GHC.Base.Maybe GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: [GHC.Base.Maybe GHC.Types.Char])
                   (ww2 :: [GHC.Types.Char])
                   (ww3 :: GHC.Base.String)
                   (ww4 :: [GHC.Base.Maybe GHC.Types.Char])
                   (ww5 :: [GHC.Types.Char]) ->
                 case GHC.Base.eqString ww ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ (GHC.Base.Maybe GHC.Types.Char)
                             Main.$fEqPuzzle_$s$fEqMaybe
                             ww1
                             ww4 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Base.eqString ww2 ww5 } }) -}
14bb44da1d88ea34b6772ee4a77bbc68
  $w$cshow ::
    [GHC.Base.Maybe GHC.Types.Char]
    -> [GHC.Types.Char] -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [GHC.Base.Maybe GHC.Types.Char])
                   (ww1 :: [GHC.Types.Char]) ->
                 case GHC.Base.map
                        @ (GHC.Base.Maybe GHC.Types.Char)
                        @ GHC.Types.Char
                        Main.renderPuzzleChar
                        ww of wild {
                   []
                   -> Main.$fShowPuzzle3
                        @ [GHC.Types.Char]
                        (GHC.Types.: @ GHC.Types.Char)
                        ww1
                   : x xs
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.Types.:
                           @ GHC.Types.Char
                           x
                           (Data.OldList.prependToAll @ GHC.Types.Char Main.$fShowPuzzle2 xs))
                        (Main.$fShowPuzzle3
                           @ [GHC.Types.Char]
                           (GHC.Types.: @ GHC.Types.Char)
                           ww1) }) -}
6d2710a8c9fcd11483e3517c49cdb849
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Main.Name -> Main.Age -> GHC.Base.String -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Main.Name)
                   (ww2 :: Main.Age)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowPerson2
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.shows8
                          (GHC.Show.showLitString
                             ww1
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows8
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (case GHC.Show.$w$cshowsPrec3 11# ww2 x of ww3 { (#,#) ww4 ww5 ->
                                    GHC.Types.: @ GHC.Types.Char ww4 ww5 })))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)) }) -}
0a704ac3e3ff17d87838c45615edd3ce
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Main.WordList -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Main.WordList)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Main.$fShowWordList2
                        (GHC.Show.showList__
                           @ [GHC.Types.Char]
                           GHC.Show.shows_$cshowList
                           w `cast` (Main.N:WordList[0])
                           w1)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Main.$fShowWordList2
                           (GHC.Show.showList__
                              @ [GHC.Types.Char]
                              GHC.Show.shows_$cshowList
                              w `cast` (Main.N:WordList[0])
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w1))) }) -}
272ae6e008b4af31f5f1fc18c43e0877
  $wgameOver ::
    GHC.Base.String
    -> [GHC.Base.Maybe GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U><S,1*U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: [GHC.Base.Maybe GHC.Types.Char])
                   (ww2 :: [GHC.Types.Char])
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char ww2 0# of ww3 { DEFAULT ->
                 case Main.$wgo ww1 0# of ww4 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># (GHC.Prim.-# ww3 ww4) 9#) of wild {
                   GHC.Types.False -> (# w, GHC.Tuple.() #)
                   GHC.Types.True
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.gameOver2
                             GHC.Types.True
                             w of ds1 { (#,#) ipv ipv1 ->
                      case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             (GHC.CString.unpackAppendCString# "The word was: "# ww)
                             GHC.Types.True
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      System.Exit.exitSuccess1 @ () ipv2 } } } } }) -}
0eb4342051545a691cfb044450a78a5f
  $wgameWin ::
    [GHC.Base.Maybe GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: [GHC.Base.Maybe GHC.Types.Char])
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case (Main.gameWin_go ww) `cast` (Data.Monoid.N:All[0]) of wild {
                   GHC.Types.False -> (# w, GHC.Tuple.() #)
                   GHC.Types.True
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.gameWin2
                             GHC.Types.True
                             w of ds1 { (#,#) ipv ipv1 ->
                      System.Exit.exitSuccess1 @ () ipv } }) -}
973b549e01d46842564c68442ae5dda9
  $wgo ::
    [GHC.Base.Maybe GHC.Types.Char] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
31c9cf0bcba9e19843b3c2d3a5d596a3
  $wrunGame ::
    GHC.Base.String
    -> [GHC.Base.Maybe GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U><S,U><S,U><S,U>, Inline: [0] -}
5421efcfa10b50163db884754084cb68
  type Age = GHC.Integer.Type.Integer
29b1c2467858e581962a498c6425c7cd
  type Name = GHC.Base.String
ac7807dd98638ef3b0ccf1b6e0685093
  data Person = Person Main.Name Main.Age
c1d397394a16e069dd2ad30dbf930e5e
  data PersonInvalid
    = NameEmpty | AgeTooLow | PersonInvalidUnknown GHC.Base.String
577ede97fdb78662881bf2855987b161
  data Puzzle
    = Puzzle GHC.Base.String
             [GHC.Base.Maybe GHC.Types.Char]
             [GHC.Types.Char]
0a704ac3e3ff17d87838c45615edd3ce
  newtype WordList = WordList [GHC.Base.String]
33a65bb59f8055f8f999d4c13d2c8081
  allWords :: GHC.Types.IO Main.WordList
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.allWords1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Main.WordList>_R)) -}
e1d22d71d0a242c09e3b6a4ceb606117
  allWords1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.WordList #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    (Data.OldList.lines ipv3)
                      `cast`
                    (Sym (Main.N:WordList[0])) #) } }) -}
2e893ff608e2343e1d9ca23fb20154fe
  allWords2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "data/dict.txt"#) -}
09b69ff387f2fc0306253048dcf8763f
  alreadyGuessed :: Main.Puzzle -> GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Puzzle) (x :: GHC.Types.Char) ->
                 case ds of wild { Main.Puzzle ds1 ds2 s ->
                 GHC.List.elem @ GHC.Types.Char GHC.Classes.$fEqChar x s }) -}
2e259010cc987fff1e78a9a475f60ec3
  charInWord :: Main.Puzzle -> GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Puzzle) (x :: GHC.Types.Char) ->
                 case ds of wild { Main.Puzzle s ds1 ds2 ->
                 GHC.List.elem @ GHC.Types.Char GHC.Classes.$fEqChar x s }) -}
6ff8973af45bcdaff4c69f64d6931ea0
  fillInCharacter :: Main.Puzzle -> GHC.Types.Char -> Main.Puzzle
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,1*U,U)><L,U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Puzzle) (w1 :: GHC.Types.Char) ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 Main.Puzzle
                   ww1
                   (GHC.List.zipWith
                      @ GHC.Types.Char
                      @ (GHC.Base.Maybe GHC.Types.Char)
                      @ (GHC.Base.Maybe GHC.Types.Char)
                      (\ (wordChar :: GHC.Types.Char)
                         (guessChar :: GHC.Base.Maybe GHC.Types.Char)[OneShot] ->
                       case wordChar of wild { GHC.Types.C# x ->
                       case w1 of wild1 { GHC.Types.C# y ->
                       case GHC.Prim.tagToEnum#
                              @ GHC.Types.Bool
                              (GHC.Prim.eqChar# x y) of wild2 {
                         GHC.Types.False -> guessChar
                         GHC.Types.True -> GHC.Base.Just @ GHC.Types.Char wild } } })
                      ww1
                      ww2)
                   (GHC.Types.: @ GHC.Types.Char w1 ww3) }) -}
f9f371fdb08ffa6dd21138fafc4bc454
  freshPuzzle :: GHC.Base.String -> Main.Puzzle
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (xs :: GHC.Base.String) ->
                 Main.Puzzle
                   xs
                   (GHC.Base.build
                      @ (GHC.Base.Maybe GHC.Types.Char)
                      (\ @ b1
                         (c :: GHC.Base.Maybe GHC.Types.Char -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Char
                         @ b1
                         (GHC.Base.mapFB
                            @ (GHC.Base.Maybe GHC.Types.Char)
                            @ b1
                            @ GHC.Types.Char
                            c
                            Main.freshPuzzle1)
                         n
                         xs))
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cb1b6124216b1c85d2ad515401b6182f
  freshPuzzle1 :: GHC.Types.Char -> GHC.Base.Maybe GHC.Types.Char
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: GHC.Types.Char) -> GHC.Base.Nothing @ GHC.Types.Char) -}
c4a8f5f4b304eaad1a96371b522d3e2c
  gameOver :: Main.Puzzle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LSS),1*U(U,1*U,1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.gameOver1
                  `cast`
                (<Main.Puzzle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
cc6d4fd418f6abb015d33c5f5ec8131c
  gameOver1 ::
    Main.Puzzle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LSS),1*U(U,1*U,1*U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Puzzle)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 Main.$wgameOver ww1 ww2 ww3 w1 }) -}
0f0ba5cebb01fb658b71073a8e042ff1
  gameOver2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "You lose!"#) -}
2ba6f3fb7b395c2d8abb77217de916fd
  gameWin :: Main.Puzzle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LSL),1*U(A,1*U,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.gameWin1
                  `cast`
                (<Main.Puzzle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
065191f97df1ac31270620c68e53118b
  gameWin1 ::
    Main.Puzzle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LSL),1*U(A,1*U,A)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Puzzle)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 Main.$wgameWin ww2 w1 }) -}
339ecf04e8efdb1bc15fe47b0e5928ec
  gameWin2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "You win!"#) -}
96a8da007a68d8fff1a83d893833347e
  gameWin_go :: [GHC.Base.Maybe GHC.Types.Char] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
ce8195cc43594568800b4638f8668304
  gameWords :: GHC.Types.IO Main.WordList
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.gameWords1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Main.WordList>_R)) -}
15a49518ccff462298c8f8ca814a507a
  gameWords1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.WordList #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    (GHC.List.filter
                       @ [GHC.Types.Char]
                       Main.gameWords2
                       (Data.OldList.lines ipv3))
                      `cast`
                    (Sym (Main.N:WordList[0])) #) } }) -}
171e4db041bc0325da728d39feca32a6
  gameWords2 :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (w :: GHC.Base.String) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char w 0# of ww2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># ww2 5#) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww2 7#) } }) -}
6e61eb302364834e4fa524243fb711d8
  gimmePerson :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.gimmePerson1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
d5b98e257306c87a8a3a5366cde5d4ef
  gimmePerson1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
1b2c07c4ba5e7ab7bb8f9b6b5876bce4
  handleGuess ::
    Main.Puzzle -> GHC.Types.Char -> GHC.Types.IO Main.Puzzle
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.handleGuess1
                  `cast`
                (<Main.Puzzle>_R
                 ->_R <GHC.Types.Char>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Main.Puzzle>_R)) -}
c9dab62c082ae599c02eab5f6fbb5296
  handleGuess1 ::
    Main.Puzzle
    -> GHC.Types.Char
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Puzzle #)
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,U(U)><S,U>,
     Unfolding: (\ (puzzle :: Main.Puzzle)
                   (guess :: GHC.Types.Char)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString#
                           "Your guess was: "#
                           (GHC.Types.:
                              @ GHC.Types.Char
                              guess
                              (GHC.Types.[] @ GHC.Types.Char)))
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case puzzle of wild { Main.Puzzle ds ds2 s1 ->
                 case GHC.List.elem
                        @ GHC.Types.Char
                        GHC.Classes.$fEqChar
                        guess
                        s1 of wild1 {
                   GHC.Types.False
                   -> case GHC.List.elem
                             @ GHC.Types.Char
                             GHC.Classes.$fEqChar
                             guess
                             ds of wild2 {
                        GHC.Types.False
                        -> case GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  Main.handleGuess4
                                  GHC.Types.True
                                  ipv of ds3 { (#,#) ipv2 ipv3 ->
                           (# ipv2,
                              Main.Puzzle
                                ds
                                (GHC.List.zipWith
                                   @ GHC.Types.Char
                                   @ (GHC.Base.Maybe GHC.Types.Char)
                                   @ (GHC.Base.Maybe GHC.Types.Char)
                                   (\ (wordChar :: GHC.Types.Char)
                                      (guessChar :: GHC.Base.Maybe GHC.Types.Char)[OneShot] ->
                                    case wordChar of wild3 { GHC.Types.C# x ->
                                    case guess of wild4 { GHC.Types.C# y ->
                                    case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.eqChar# x y) of wild5 {
                                      GHC.Types.False -> guessChar
                                      GHC.Types.True -> GHC.Base.Just @ GHC.Types.Char wild3 } } })
                                   ds
                                   ds2)
                                (GHC.Types.: @ GHC.Types.Char guess s1) #) }
                        GHC.Types.True
                        -> case GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  Main.handleGuess3
                                  GHC.Types.True
                                  ipv of ds3 { (#,#) ipv2 ipv3 ->
                           (# ipv2,
                              Main.Puzzle
                                ds
                                (GHC.List.zipWith
                                   @ GHC.Types.Char
                                   @ (GHC.Base.Maybe GHC.Types.Char)
                                   @ (GHC.Base.Maybe GHC.Types.Char)
                                   (\ (wordChar :: GHC.Types.Char)
                                      (guessChar :: GHC.Base.Maybe GHC.Types.Char)[OneShot] ->
                                    case wordChar of wild3 { GHC.Types.C# x ->
                                    case guess of wild4 { GHC.Types.C# y ->
                                    case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.eqChar# x y) of wild5 {
                                      GHC.Types.False -> guessChar
                                      GHC.Types.True -> GHC.Base.Just @ GHC.Types.Char wild3 } } })
                                   ds
                                   ds2)
                                (GHC.Types.: @ GHC.Types.Char guess s1) #) } }
                   GHC.Types.True
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.handleGuess2
                             GHC.Types.True
                             ipv of ds3 { (#,#) ipv2 ipv3 ->
                      (# ipv2, wild #) } } } }) -}
25d53deeed32292c0c458b3c0cab030c
  handleGuess2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "You already guessed that character, pick something else!"#) -}
5a995a79bcf614f439d0413a33912279
  handleGuess3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "This character was in the word, filling in the word accordingly"#) -}
707feec90aedd386a534622408ca8a48
  handleGuess4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "This character wasn't in the word, try again."#) -}
f21c93d9daad5c42fafb6fb502fd6279
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
df0b352c965a1ffb78d5021be99075d7
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   ipv4 :: [[GHC.Types.Char]]
                   = GHC.List.filter
                       @ [GHC.Types.Char]
                       Main.gameWords2
                       (Data.OldList.lines ipv3)
                 } in
                 case System.Random.$fRandomInt3
                        (Main.$fShowPersonInvalid2,
                         case GHC.List.$wlenAcc
                                @ [GHC.Types.Char]
                                ipv4
                                0# of ww2 { DEFAULT ->
                         GHC.Types.I# (GHC.Prim.-# ww2 1#) })
                        ipv2 of ds3 { (#,#) ipv5 ipv6 ->
                 case ipv6 of ww { GHC.Types.I# ww1 ->
                 let {
                   xs :: GHC.Base.String
                   = GHC.Base.map
                       @ GHC.Types.Char
                       @ GHC.Types.Char
                       GHC.Unicode.toLower
                       (GHC.List.$w!! @ GHC.Base.String ipv4 ww1)
                 } in
                 Main.$wrunGame
                   xs
                   (GHC.Base.map
                      @ GHC.Types.Char
                      @ (GHC.Base.Maybe GHC.Types.Char)
                      Main.freshPuzzle1
                      xs)
                   (GHC.Types.[] @ GHC.Types.Char)
                   ipv5 } } } }) -}
ff9d341cc9348d8ea60ad95937b5153b
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
8827a90c48c76f7f3b4d7ff2e2472899
  maxWordLength :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 7#) -}
00390fa823760af55384609b5521433e
  minWordLength :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
03f1eed596d526d39e9c34e645c5c62a
  mkPerson ::
    Main.Name
    -> Main.Age -> Data.Either.Either Main.PersonInvalid Main.Person
  {- Arity: 2, Strictness: <S,U><L,U>,
     Unfolding: (\ (name :: Main.Name) (age :: Main.Age) ->
                 let {
                   $j :: GHC.Prim.Void#
                         -> Data.Either.Either Main.PersonInvalid Main.Person
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (w :: GHC.Prim.Void#)[OneShot] ->
                     case GHC.Base.eqString
                            name
                            (GHC.Types.[] @ GHC.Types.Char) of wild {
                       GHC.Types.False
                       -> case GHC.Integer.Type.gtInteger#
                                 age
                                 Main.mkPerson3 of wild1 { DEFAULT ->
                          case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild1 of wild2 {
                            GHC.Types.False -> Main.mkPerson2
                            GHC.Types.True
                            -> Data.Either.Left
                                 @ Main.PersonInvalid
                                 @ Main.Person
                                 (Main.PersonInvalidUnknown
                                    (GHC.CString.unpackAppendCString#
                                       "Name was: "#
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.shows8
                                             (GHC.Show.showLitString
                                                name
                                                Main.$fShowPersonInvalid6))
                                          (GHC.CString.unpackAppendCString#
                                             "Age was: "#
                                             (case GHC.Show.$w$cshowsPrec3
                                                     0#
                                                     age
                                                     (GHC.Types.[]
                                                        @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                                              GHC.Types.: @ GHC.Types.Char ww3 ww4 }))))) } }
                       GHC.Types.True -> Main.mkPerson1 }
                 } in
                 case GHC.Classes.$fEq[]_$s$c==1
                        name
                        (GHC.Types.[] @ GHC.Types.Char) of wild {
                   GHC.Types.False
                   -> case GHC.Integer.Type.gtInteger#
                             age
                             Main.mkPerson3 of wild1 { DEFAULT ->
                      case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild1 of wild2 {
                        GHC.Types.False -> $j GHC.Prim.void#
                        GHC.Types.True
                        -> Data.Either.Right
                             @ Main.PersonInvalid
                             @ Main.Person
                             (Main.Person name age) } }
                   GHC.Types.True -> $j GHC.Prim.void# }) -}
d06eed8b039f1250d4d06a5cff2a3260
  mkPerson1 :: Data.Either.Either Main.PersonInvalid Main.Person
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ Main.PersonInvalid
                   @ Main.Person
                   Main.NameEmpty) -}
8ad5f3bd0e60222af9db86722c1f766e
  mkPerson2 :: Data.Either.Either Main.PersonInvalid Main.Person
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ Main.PersonInvalid
                   @ Main.Person
                   Main.AgeTooLow) -}
e0d0fd669055b9c06369206e5aee9448
  mkPerson3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
11710d103ab90bf03b8d5ff8ec6de480
  paliChecker :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Base.String) ->
                 GHC.Base.build
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      (GHC.List.filterFB @ GHC.Types.Char @ b c Main.paliChecker3)
                      n
                      (Main.paliChecker1 x))) -}
c40421dc25b26a9089ec535bca4ca916
  paliChecker1 :: GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: GHC.Base.String) ->
                 Data.OldList.wordsFB
                   @ [GHC.Types.Char]
                   Main.paliChecker2
                   (GHC.Types.[] @ GHC.Types.Char)
                   x) -}
01e68bb911e60ca48aad5fe57e3bb9cb
  paliChecker2 ::
    [GHC.Types.Char] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (x :: [GHC.Types.Char])
                   (y :: [GHC.Types.Char])[OneShot] ->
                 letrec {
                   go :: [GHC.Types.Char] -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [GHC.Types.Char]) ->
                     case ds of wild {
                       [] -> y
                       : y1 ys
                       -> GHC.Types.: @ GHC.Types.Char (GHC.Unicode.toLower y1) (go ys) }
                 } in
                 go x) -}
81133e02d4c68a4753ec9f8e69456162
  paliChecker3 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Char) ->
                 GHC.List.elem
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   ds
                   Main.paliChecker4) -}
688b8cec79c8890552aa5364f43066d0
  paliChecker4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "abcdefghijklmnopqrstuvwxyz"#) -}
187f8b14d0d6200f1c6a7f83ccf6d211
  palindrome :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.palindrome1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
53e3b040c1503a0815506b89664057eb
  palindrome1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
6cfefa137168c35beaa691500632b06a
  randomWord :: Main.WordList -> GHC.Types.IO GHC.Base.String
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.randomWord1
                  `cast`
                (<Main.WordList>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
3406d70803129fc5359e7ca804464d2d
  randomWord' :: GHC.Types.IO GHC.Base.String
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.randomWord'1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
3d6bad612b779ef00f267605565da8cd
  randomWord'1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Main.gameWords1 s of ds1 { (#,#) ipv ipv1 ->
                 Main.randomWord1 ipv1 ipv }) -}
ac26c6236625597047dac99af0ef9bcf
  randomWord1 ::
    Main.WordList
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (ds :: Main.WordList)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Random.$fRandomInt3
                        (Main.$fShowPersonInvalid2,
                         case GHC.List.$wlenAcc
                                @ [GHC.Types.Char]
                                ds `cast` (Main.N:WordList[0])
                                0# of ww2 { DEFAULT ->
                         GHC.Types.I# (GHC.Prim.-# ww2 1#) })
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    GHC.List.!!
                      @ GHC.Base.String
                      ds `cast` (Main.N:WordList[0])
                      ipv1 #) }) -}
d849360675e310ee2233e723fee3a363
  renderPuzzleChar :: GHC.Base.Maybe GHC.Types.Char -> GHC.Types.Char
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.Maybe GHC.Types.Char) ->
                 case ds of wild {
                   GHC.Base.Nothing -> Main.renderPuzzleChar1
                   GHC.Base.Just a -> a }) -}
f1688679037fcea4db43809b03ad893a
  renderPuzzleChar1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '_'#) -}
1e5c93677ac28f6feca29477775d7f5a
  runGame :: Main.Puzzle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LSS),U(U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.runGame1
                  `cast`
                (<Main.Puzzle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
dc418293cf629bcc2a69e3f9e83a8904
  runGame1 ::
    Main.Puzzle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LSS),U(U,U,U)><S,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Puzzle)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 Main.$wrunGame ww1 ww2 ww3 w1 }) -}
f5c3c31a6e185d6ce8fbb2ce275597f4
  wrongGuess :: Main.Puzzle -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSS),1*U(A,1*U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Puzzle) ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char ww3 0# of ww4 { DEFAULT ->
                 case Main.$wgo ww2 0# of ww5 { DEFAULT ->
                 GHC.Types.I# (GHC.Prim.-# ww4 ww5) } } }) -}
instance [safe] GHC.Classes.Eq [Main.PersonInvalid]
  = Main.$fEqPersonInvalid
instance [safe] GHC.Classes.Eq [Main.Puzzle] = Main.$fEqPuzzle
instance [safe] GHC.Classes.Eq [Main.WordList] = Main.$fEqWordList
instance [safe] GHC.Show.Show [Main.Person] = Main.$fShowPerson
instance [safe] GHC.Show.Show [Main.PersonInvalid]
  = Main.$fShowPersonInvalid
instance [safe] GHC.Show.Show [Main.Puzzle] = Main.$fShowPuzzle
instance [safe] GHC.Show.Show [Main.WordList] = Main.$fShowWordList
"SPEC/Main $fEqMaybe @ Char" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                        GHC.Types.Char)
  GHC.Base.$fEqMaybe @ GHC.Types.Char $dEq
  = Main.$fEqPuzzle_$s$fEqMaybe
"SPEC/Main $fEqMaybe_$c== @ Char" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                             GHC.Types.Char)
  GHC.Base.$fEqMaybe_$c== @ GHC.Types.Char $dEq
  = Main.$fEqPuzzle_$s$fEqMaybe_$c==
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

