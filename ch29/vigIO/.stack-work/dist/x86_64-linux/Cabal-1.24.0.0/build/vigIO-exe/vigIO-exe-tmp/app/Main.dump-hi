
==================== FINAL INTERFACE ====================
2016-11-17 05:40:57.788918 UTC

interface main@main:Main 8001
  interface hash: 362ad49f6a8131cdeef5495444740a80
  ABI hash: 012b723b64d2ac208847eee949b619d6
  export-list hash: 5fb7aa99099936cdb1262a6988bd077a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: eb654962999287f520bafc04e2700355
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.main'
  Main.main1
  Main.main2
  Main.vigIO
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      vigIO-0.1.0.0@vigIO-0.1.0.0-ItaPjwKPVuJKEAkQOAuq1e
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Functor 6fc476505db88d678632a4a838125f13
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.IO.Handle a1938753d58593f0a419f85b67aa7cd3
import  -/  base-4.9.0.0:GHC.IO.Handle.FD adf0145182d1c6eb38b2b8ce5a292e84
import  -/  base-4.9.0.0:GHC.IO.Handle.Text 23b6dc4ed000f42bf105ce56bdeb0dc6
import  -/  base-4.9.0.0:GHC.IO.IOMode 9380a6a6b8c50facc225c4877c5e1e90
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.Environment ee0914a962f5508d0fd404c89ee4999b
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  vigIO-0.1.0.0@vigIO-0.1.0.0-ItaPjwKPVuJKEAkQOAuq1e:Lib 6b0d17d812a9e1ea90775c861deddcb9
import  -/  vigIO-0.1.0.0@vigIO-0.1.0.0-ItaPjwKPVuJKEAkQOAuq1e:VigCipher e4348407e75dca38be638299c0000721
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
c26dc691059aa2c4c9d9f4aea3b8c0e3
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main4 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
71c5a72d21474a3faef221e99854f491
  main' :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main'1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
67203c0b0fb2df416e48cc654f6d3fdd
  main'1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main'4
                        GHC.Types.False
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main'3
                        GHC.Types.False
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.shows8
                      (GHC.Show.showLitString
                         (VigCipher.vigCipher ipv3 ipv7)
                         Main.main'2))
                   GHC.Types.True
                   ipv6 } } } }) -}
75db46a60c9ae04634ead253dca017b3
  main'2 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e9a5fa788845c36a681d0ab911b5ea37
  main'3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "enter key: "#) -}
1205bc1e3724fe004f754ba7098c0004
  main'4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "enter message: "#) -}
f054481baf6f7b1cce1e97b16e78dc72
  main1 :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main'1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
436d55762ff3602f476cc8a2e0769268
  main10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "enter mode: "#) -}
392ee1802bfef2261aa753da6d9840aa
  main2 :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main6 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
22379d6f439ad9dadce1a111f48a5909
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
f9c8ae6b4ffc4e4939ab7fedd26942d4
  main5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main4 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
95cf381b158838ba812d911c865ece02
  main6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main'3
                        GHC.Types.False
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main10
                        GHC.Types.False
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Types.Char
                        GHC.IO.Handle.Text.hGetChar3
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetChar2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Char>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Types.Char
                        GHC.IO.Handle.Text.hGetChar3
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetChar2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Char>_R))
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 case GHC.IO.Handle.FD.openFile1
                        ipv11
                        GHC.IO.IOMode.ReadWriteMode
                        ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                 case GHC.IO.Handle.Text.hWaitForInput1
                        ipv13
                        Main.main9
                        ipv12 of ds8 { (#,#) ipv14 ipv15 ->
                 case ipv15 of wild {
                   GHC.Types.False
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stderr
                        Main.main8
                        GHC.Types.False
                        ipv14
                   GHC.Types.True
                   -> case GHC.IO.Handle.Text.hGetContents1
                             ipv13
                             ipv14 of ds9 { (#,#) ipv16 ipv17 ->
                      case ipv9 of wild1 { GHC.Types.C# ds ->
                      case ds of ds10 {
                        DEFAULT
                        -> GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.main7
                             GHC.Types.True
                             ipv16
                        'd'#
                        -> GHC.IO.Handle.Text.hPutStr2
                             ipv13
                             (VigCipher.unCipher ipv17 ipv3)
                             GHC.Types.False
                             ipv16
                        'e'#
                        -> GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             (VigCipher.vigCipher ipv17 ipv3)
                             GHC.Types.False
                             ipv16 } } } } } } } } } } } }) -}
e2ef6eda5eb28921d1471980dd9efd3f
  main7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "please pass -e or -d"#) -}
7a46a07cfb650bfcba0fa786e49dcaa5
  main8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "too slow"#) -}
d7c39f9fc136fd872ec6a9dbc4a4c460
  main9 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 3#) -}
5ea7f34a9856b99b7311133076bf23d6
  vigIO :: GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,U><L,U>,
     Unfolding: InlineRule (0, True, True) VigCipher.vigCipher -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

