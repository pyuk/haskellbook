
==================== FINAL INTERFACE ====================
2016-11-16 05:34:19.577884 UTC

interface main@main:Main 8001
  interface hash: 57a24cfd1468598f7e1dee5ce52a6428
  ABI hash: f923c9f6c854cb545521ed37ac4fb9a5
  export-list hash: d7c3f68182a17bfeed9f6d635de08ba2
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: eb654962999287f520bafc04e2700355
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.listTest
  Main.main
  Main.main'
  Main.main1
  Main.main2
  Main.vigIO
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      vigIO-0.1.0.0@vigIO-0.1.0.0-ItaPjwKPVuJKEAkQOAuq1e
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Functor 6fc476505db88d678632a4a838125f13
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.IO.Handle.FD adf0145182d1c6eb38b2b8ce5a292e84
import  -/  base-4.9.0.0:GHC.IO.Handle.Text 23b6dc4ed000f42bf105ce56bdeb0dc6
import  -/  base-4.9.0.0:GHC.IO.IOMode 9380a6a6b8c50facc225c4877c5e1e90
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.Environment ee0914a962f5508d0fd404c89ee4999b
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  vigIO-0.1.0.0@vigIO-0.1.0.0-ItaPjwKPVuJKEAkQOAuq1e:Lib 6b0d17d812a9e1ea90775c861deddcb9
import  -/  vigIO-0.1.0.0@vigIO-0.1.0.0-ItaPjwKPVuJKEAkQOAuq1e:VigCipher e4348407e75dca38be638299c0000721
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
90c27bda4ab144cb2b4653c2c9779282
  $wfail ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x, Inline: [0] -}
8705bc48dcfa3565bd3e6dc0eca25dbb
  listTest :: [GHC.Base.String] -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Base.String]) ->
                 case ds of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> x : ipv ipv1 -> Main.listTest_go wild } }) -}
aeca1e05ad698a9ff978c4bba133fe65
  listTest_go :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
4b99c5dfd9c8b17d9c269603b00e34b3
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main4 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
db24abcb0c012566dfaa7f563a5eff1c
  main' :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main'1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
b164b1d73d22d3d061f4afea363dbb06
  main'1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main'3
                        GHC.Types.False
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main8
                        GHC.Types.False
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.shows8
                      (GHC.Show.showLitString
                         (VigCipher.vigCipher ipv3 ipv7)
                         Main.main'2))
                   GHC.Types.True
                   ipv6 } } } }) -}
75db46a60c9ae04634ead253dca017b3
  main'2 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4872d7f2304304c4b03e5f00b034f0b1
  main'3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "enter message: "#) -}
595c4a1999d4077dc20dcacbc9ab320a
  main1 :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main'1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
c7ea928d97a4e4db46db28d3726af753
  main10 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Environment.getArgs1 s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   [] -> Main.$wfail ipv
                   : key ds
                   -> case ds of wild1 {
                        [] -> Main.$wfail ipv
                        : mode text
                        -> case GHC.IO.Handle.FD.openFile1
                                  (Main.listTest text)
                                  GHC.IO.IOMode.ReadMode
                                  ipv of ds2 { (#,#) ipv2 ipv3 ->
                           case GHC.IO.Handle.Text.hGetContents1
                                  ipv3
                                  ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                           case GHC.Base.eqString mode Main.main13 of wild2 {
                             GHC.Types.False
                             -> case GHC.Base.eqString mode Main.main12 of wild3 {
                                  GHC.Types.False
                                  -> GHC.IO.Handle.Text.hPutStr2
                                       GHC.IO.Handle.FD.stdout
                                       Main.main11
                                       GHC.Types.True
                                       ipv4
                                  GHC.Types.True
                                  -> GHC.IO.Handle.Text.hPutStr2
                                       GHC.IO.Handle.FD.stdout
                                       (VigCipher.vigCipher ipv5 key)
                                       GHC.Types.True
                                       ipv4 }
                             GHC.Types.True
                             -> GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  (VigCipher.unCipher ipv5 key)
                                  GHC.Types.True
                                  ipv4 } } } } } }) -}
bb611223d682789c9bc737b79113cc6a
  main11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "please pass -d or -e"#) -}
1b16926c5461f87a96a087ea547334e2
  main12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "-e"#) -}
eee90215f69c67b2ac99adb004f0981e
  main13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "-d"#) -}
d107a767e2b7fe33c119403c4c99849b
  main2 :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main10 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
8b92e311ae689fdb3fc494b726af17f0
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main8
                        GHC.Types.False
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main7
                        GHC.Types.False
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Types.Char
                        GHC.IO.Handle.Text.hGetChar3
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetChar2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Char>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Types.Char
                        GHC.IO.Handle.Text.hGetChar3
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetChar2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Char>_R))
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main6
                        GHC.Types.False
                        ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                 case GHC.IO.Handle.FD.openFile1
                        ipv13
                        GHC.IO.IOMode.ReadWriteMode
                        ipv12 of ds8 { (#,#) ipv14 ipv15 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv15
                        ipv14 of ds9 { (#,#) ipv16 ipv17 ->
                 case ipv9 of wild { GHC.Types.C# ds ->
                 case ds of ds10 {
                   DEFAULT
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main5
                        GHC.Types.True
                        ipv16
                   'd'#
                   -> GHC.IO.Handle.Text.hPutStr2
                        ipv15
                        (VigCipher.unCipher ipv17 ipv3)
                        GHC.Types.False
                        ipv16
                   'e'#
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (VigCipher.vigCipher ipv17 ipv3)
                        GHC.Types.False
                        ipv16 } } } } } } } } } } }) -}
1be6c67abf29c1a6535378bd27c2fe1c
  main5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "please pass -e or -d"#) -}
6f71851a830a8d566f3a4a72a0ac6d3f
  main6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "give me a file: "#) -}
2b10a066ebb28303553d3b34edcccd91
  main7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "enter mode: "#) -}
b0e9f6f4fecffdb380d87a51ffc0a437
  main8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "enter key: "#) -}
7427d581d0e6acb8326ed78e2ab72bae
  main9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main4 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
5ea7f34a9856b99b7311133076bf23d6
  vigIO :: GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,U><L,U>,
     Unfolding: InlineRule (0, True, True) VigCipher.vigCipher -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

